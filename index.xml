<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DeNS</title>
    <link>https://mlabs-haskell.github.io/DeNS/</link>
    <description>Recent content on DeNS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://mlabs-haskell.github.io/DeNS/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-pdns-backend/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-pdns-backend/getting_started/</guid>
      <description>The executable dens-pdns-backend-cli is a remote backend to PowerDNS which facilitates propagating RRs stored in DeNS Query’s database to PowerDNS so traditional DNS resolvers are able to transitvely query the blockchain for RRs.&#xA;In the git repository, it is provided at the flake output dens-pdns-backend, so Nix users can enter a shell with the dens-pdns-backend-cli executable with the following command.&#xA;nix shell github:mlabs-haskell/DeNS#dens-pdns-backend When dens-pdns-backend-cli executes, it needs the following environment variables set.</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-query/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-query/getting_started/</guid>
      <description>DeNS Query is implemented with the dens-query-cli executable. In the git repository, it is provided at the flake output packages.&amp;lt;system&amp;gt;.dens-query-cli, so Nix users can enter a shell with the dens-query-cli executable with the following command.&#xA;nix shell github:mlabs-haskell/DeNS#dens-query-cli When dens-query-cli is executed, it will require that the following dependencies are running:&#xA;PostgreSQL&#xA;Ogmios&#xA;Moreover, it will look for a configuration file (see Configuration file format) provided in the environment variable in DENS_QUERY_CONFIG for the relevant dependency connection information along DeNS specific information.</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/getting_started/</guid>
      <description>The executable dens-transactions-cli allows one to submit transactions relating to the DeNS protocol to the blockchain. In the git repository, it is provided at the flake output dens-transactions-cli, so Nix users can enter a shell with the dens-transactions-cli executable with the following command.&#xA;nix shell github:mlabs-haskell/DeNS#dens-transactions-cli When dens-transactions-cli executes, most commands will need the following runtime dependencies:&#xA;Ogmios&#xA;dens-query-cli&#xA;Tip Each subcommand (described in later sections) has a --help flag to describe its usage.</description>
    </item>
    <item>
      <title>Technical Specification</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/architecture/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/architecture/architecture/</guid>
      <description>Requirements (Conceptual) The DeNS protocol must support a small list of essential features to deliver on the promise of a decentralized, transparent, censorship-resistant, and privacy-conscious successor to the DNS protocol. These features are:&#xA;Records must be stored in an immutable, permanent, and public database. Users must have the ability (at least in principle) to resolve queries locally - that is, it ought to be possible for a user to reconstruct the DeNS database solely from public information, and use that database to resolve queries without sharing those queries (or the identity of the user) with any third party Users must be provided with direct control over their records, such that they can update those records without the assent or intervention of any third party.</description>
    </item>
    <item>
      <title>HTTP API</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-query/http_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-query/http_api/</guid>
      <description>DeNS Query provides an HTTP interface for accessing the UTxOs stored in the database.&#xA;Authentication Some endpoints provided by DeNS Query are exposed internal functionalities to and are made available to facilitate testing and development.&#xA;Important To prevent malicious interactions/modifications of DeNS Query’s database, it is therefore expected that these endpoints must NOT be exposed publicly (i.e., not accessible to end-users). For this to be effective, a HTTPS reverse proxy may be used to:</description>
    </item>
    <item>
      <title>Initialization</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/init/</guid>
      <description> A single participant in the protocol will need to initialize the DeNS protocol for everyone.&#xA;Initializing the DeNS protocol dens-transactions-cli \ init \ --ogmios-host 127.0.0.1 \ --ogmios-port 1337 \ --network Preview \ --protocol-nft-tx-out-ref &amp;#34;5969b450ec00019044fbcb1cd5973cc80a47b1507e2e0e14f3e6e4a2f23cdabd#0&amp;#34; \ --dens-query-socket-path /ipc/dens-query/dens-query.sock \ --private-key-bech32 ed25519_sk1p8874wgza2c5yxytucugt2k2mrw3l3gkpg6ezxn498smerqh8j0qe078pu Note This will output the protocol’s token which must be used in all `dens-query-cli`s&amp;#39; configuration files that follow this instance of the DeNS protocol. </description>
    </item>
    <item>
      <title>Database Schema</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-query/database_schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-query/database_schema/</guid>
      <description>Note Readers may skip this section. DeNS query uses PostgreSQL with many PostgreSQL specific extensions. In particular, the PostgreSQL specific extensions were used to respond to blockchain rollbacks where the blockchain will rollback to a particular block requiring the protocol to undo all the changes from the present to the block to rollback to.&#xA;Database schema source code -- = Overview -- For each &amp;#34;kind of UTxO&amp;#34; for the dens protocol, we create a table for it e.</description>
    </item>
    <item>
      <title>Milestone 3</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/milestone-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/milestone-3/</guid>
      <description>DeNS Query Layer Development Milestone Outputs&#xA;A package that listens to Cardano transactions that are related to DeNS and populates a relational database. This serves as the main query layer for other applications like DNS analytics (we expect this to be particularly useful for security-related applications) but also as the database from which traditional DNS service integration can take place.&#xA;The package which listens to Cardano transactions that are related to DeNS and populates a relational database can be found here.</description>
    </item>
    <item>
      <title>Register a Domain</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/register_domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/register_domain/</guid>
      <description> A user who wishes to purchase a domain from the smart contracts may execute the following command to submit a transaction which accomplishes this.&#xA;Registering a domain dens-transactions-cli \ register-domain \ --ogmios-host 127.0.0.1 \ --ogmios-port 1337 \ --network Preview \ --protocol-nft-tx-out-ref &amp;#34;5969b450ec00019044fbcb1cd5973cc80a47b1507e2e0e14f3e6e4a2f23cdabd#0&amp;#34; \ --dens-query-socket-path /ipc/dens-query/dens-query.sock \ --private-key-bech32 ed25519_sk1p8874wgza2c5yxytucugt2k2mrw3l3gkpg6ezxn498smerqh8j0qe078pu \ --domain-name mydomain.com </description>
    </item>
    <item>
      <title>Update a Record</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/update_record/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/update_record/</guid>
      <description>After a participant purchases a domain, they have a token whose trading associates RRs with the domain name. The following command demonstrates how one may trade the token so that the provided RRs are associated with the given domain name.&#xA;Updating the resource records associated with a domain dens-transactions-cli \ update-record \ --ogmios-host 127.0.0.1 \ --ogmios-port 1337 \ --network Preview \ --protocol-nft-tx-out-ref &amp;#34;5969b450ec00019044fbcb1cd5973cc80a47b1507e2e0e14f3e6e4a2f23cdabd#0&amp;#34; \ --dens-query-socket-path /ipc/dens-query/dens-query.sock \ --private-key-bech32 ed25519_sk1p8874wgza2c5yxytucugt2k2mrw3l3gkpg6ezxn498smerqh8j0qe078pu \ --domain-name mydomain.</description>
    </item>
    <item>
      <title>Milestone 4</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/milestone-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/milestone-4/</guid>
      <description>DeNS Control Layer Development Milestone Outputs&#xA;An &amp;#39;offchain&amp;#39; (which is a bit more substantial here than in most dapps) component that can build DeNS transactions and can be exposed to users through CLIs, GUIs, and APIs.&#xA;An offchain component that can build DeNS transactions exposed via a CLI is provided here.&#xA;Minimally, a basic DeNS CLI utility that can be used to meaningfully interact with the protocol.&#xA;The CLI utility is provided as a flake output here.</description>
    </item>
    <item>
      <title>Final Milestone</title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/final-milestone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/catalyst-reports/final-milestone/</guid>
      <description>Deployment, Documentation, Productionizing Milestone Outputs&#xA;A deployment-ready package or container (Nix/Docker) is made available for users&#xA;Such packages are all available with Nix as a flake output:&#xA;dens-query-cli&#xA;dens-transactions-cli&#xA;dens-pdns-backend&#xA;Docker images and a Compose file to run the system on the Preview testnet are available here and here respectively.&#xA;Extensive tests, including golden tests where applicable/useful, are implemented for each of the DeNS components&#xA;An integration test suite which verifies data is piped between each component correctly can be found here</description>
    </item>
    <item>
      <title></title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-pdns-backend/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-pdns-backend/readme/</guid>
      <description>This section describes dens-pdns-backend-cli which is a PowerDNS backend so RRs on the blockchain can be propagated to traditional DNS resolvers.</description>
    </item>
    <item>
      <title></title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-query/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-query/readme/</guid>
      <description>This describes the DeNS query component of DeNS. DeNS Query is an HTTP server that syncs with the Cardano blockchain (using Ogmios as an interface to the blockchain) by providing a PostgreSQL database of all UTxOs containing relevant information to the DeNS protocol.</description>
    </item>
    <item>
      <title></title>
      <link>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mlabs-haskell.github.io/DeNS/docs/dens-transactions/readme/</guid>
      <description>This document describes the DeNS transaction component of DeNS. This shows how one can use a CLI interface to create / submit transactions to the Cardano blockchain in order to interact with the DeNS protocol.</description>
    </item>
  </channel>
</rss>
